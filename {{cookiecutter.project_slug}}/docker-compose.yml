version: '3.4'

# ADMIN MASTER PASSWORD: !!!SET MASTER_ADMIN_PASSWORD!!!

networks:
  default:
    external: false
  traefik-public:
    external: true

volumes:
  postgres_data:
  {%- if cookiecutter.use_letsencrypt == 'y' and cookiecutter.use_traefik == 'y' %}
  traefik_letsencrypt:
  {%- endif %}
  {%- if cookiecutter.use_portainer == 'y' %}
  portainer_data:
  {%- endif %}
  {%- if cookiecutter.use_waautomate == 'y' %}
  waautomate_session_data:
  {%- endif %}
  {%- if cookiecutter.use_rocketchat == 'y' %}
  rocketchat_uploads:
  rocketchat_db:
  rocketchat_dump:
  {%- endif %}
  {%- if cookiecutter.use_nextcloud == 'y' %}
  nextcloud_data:
  {%- endif %}
  {%- if cookiecutter.use_odoo == 'y' %}
  odoo_data:
  odoo_config:
  odoo_addons:
  odoo_db:
  {%- endif %}
  {%- if cookiecutter.use_mautic == 'y' %}
  mautic_db:
  mautic_data:
  {%- endif %}
  {%- if cookiecutter.use_limesurvey == 'y' %}
  limesurvey_db:
  limesurvey_uploads:
  {%- endif %}
  {%- if cookiecutter.use_glpi == 'y' %}
  glpi_db:
  glpi_files:
  glpi_plugins:
  {%- endif %}
  {%- if cookiecutter.use_moodle == 'y' %}
  moodle_db:
  moodle_data:
  {%- endif %}
  {%- if cookiecutter.use_rasax == 'y' %}
  rasax_db:
  {%- endif %}
  {%- if cookiecutter.use_openproject == 'y' %}
  openproject_pgdata:
  openproject_opdata:
  {%- endif %}
  {%- if cookiecutter.use_wppconnect == 'y' %
  wppconnect_data:
  {%- endif %}
  

{%- if cookiecutter.use_openproject == 'y' %}


x-op-restart-policy: &restart_policy
  restart: unless-stopped
x-op-image: &image
  image: openproject/community:${TAG:-11}
x-op-app: &app
  <<: *image
  <<: *restart_policy
  environment:
    RAILS_CACHE_STORE: "memcache"
    OPENPROJECT_CACHE__MEMCACHE__SERVER: "cache:11211"
    OPENPROJECT_RAILS__RELATIVE__URL__ROOT: "${OPENPROJECT_RAILS__RELATIVE__URL__ROOT:-}"
    DATABASE_URL: "postgres://postgres:p4ssw0rd@db/openproject?pool=20&encoding=unicode&reconnect=true"
    RAILS_MIN_THREADS: 4
    RAILS_MAX_THREADS: 16
    USE_PUMA: "true"
    # set to true to enable the email receiving feature. See ./docker/cron for more options
    IMAP_ENABLED: "${IMAP_ENABLED:-false}"
  volumes:
    - "openproject_opdata:/var/openproject/assets"
  links:
    - "openproject_db:db"
    - "openproject_cache:cache"
{%- endif %}

{%- if cookiecutter.use_rasax == 'y' %}

x-database-credentials: &database-credentials
  DB_HOST: "db"
  DB_PORT: "5432"
  DB_USER: "${DB_USER:-admin}"
  DB_PASSWORD: "${DB_PASSWORD}"
  DB_LOGIN_DB: "${DB_LOGIN_DB:-rasa}"

x-rabbitmq-credentials: &rabbitmq-credentials
  RABBITMQ_HOST: "rabbit"
  RABBITMQ_USERNAME: "user"
  RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}

x-redis-credentials: &redis-credentials
  REDIS_HOST: "redis"
  REDIS_PORT: "6379"
  REDIS_PASSWORD: ${REDIS_PASSWORD}
  REDIS_DB: "1"
  REDIS_CACHE_DB: "2"
  ACCEPTABLE_QUERY_COUNT_NUMBER: "50000"
  
x-duckling-credentials: &duckling-credentials
  RASA_DUCKLING_HTTP_URL: "http://duckling:8000"

x-nginx-host-variables: &nginx-host-variables
  RASA_X_HOST: "rasa-x:5002"
  RASA_USER_APP: "app:5055"
  RASA_PRODUCTION_HOST: "rasa-production:5005"

x-rasax-credentials: &rasax-credentials
  RASA_X_HOST: "http://rasa-x:5002"
  RASA_X_USERNAME: ${RASA_X_USERNAME:-admin}
  RASA_X_PASSWORD: ${RASA_X_PASSWORD:-}
  RASA_X_TOKEN: ${RASA_X_TOKEN}
  JWT_SECRET: ${JWT_SECRET}
  RASA_USER_APP: "http://app:5055"
  RASA_PRODUCTION_HOST: "http://rasa-production:5005"
  RASA_WORKER_HOST: "http://rasa-worker:5005"
  RASA_TOKEN: ${RASA_TOKEN}

x-rasa-credentials: &rasa-credentials
  <<: *rabbitmq-credentials
  <<: *rasax-credentials
  <<: *database-credentials
  <<: *redis-credentials
  <<: *duckling-credentials
  RASA_TOKEN: ${RASA_TOKEN}
  RASA_MODEL_PULL_INTERVAL: 10
  RABBITMQ_QUEUE: "rasa_production_events"
  RASA_TELEMETRY_ENABLED: ${RASA_TELEMETRY_ENABLED:-true}

x-rasa-services: &default-rasa-service
  restart: always
  image: "rasa/rasa:${RASA_VERSION}-full"
  volumes:
      - ./.config:/.config
  expose:
    - "5005"
  command: >
    x
    --no-prompt
    --production
    --config-endpoint http://rasa-x:5002/api/config?token=${RASA_X_TOKEN}
    --port 5005
    --jwt-method HS256
    --jwt-secret ${JWT_SECRET}
    --auth-token '${RASA_TOKEN}'
    --cors "*"
  depends_on:
    - rasa-x
    - rabbit
    - redis
{%- endif %}

services:

  {%- if cookiecutter.use_traefik == 'y' %}

  traefik:
    image: "traefik:v2.4"
    command:
      #- "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--providers.docker.network=traefik-public"
      {%- if cookiecutter.use_letsencrypt  == 'y' %}
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--certificatesresolvers.le.acme.httpchallenge=true"
      - "--certificatesresolvers.le.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.le.acme.email={{ cookiecutter.email_for_letsencrypt }}"
      - "--certificatesresolvers.le.acme.storage=/letsencrypt/acme.json"
      {%- endif %}
    ports:
      - "80:80"
      {%- if cookiecutter.use_letsencrypt == "y"%}
      - "443:443"
      {%- endif %}
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      {%- if cookiecutter.use_letsencrypt  == 'y' %}
      - traefik_letsencrypt:/letsencrypt
      {%- endif %}
    labels:
      - traefik.enable=true
      - traefik.docker.lbswarm=true
      - traefik.http.routers.traefik.rule=Host(`traefik.{{ cookiecutter.domain }}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))
      - traefik.http.routers.traefik.middlewares=auth
      - traefik.http.routers.traefik.service=api@internal
      - traefik.http.services.traefik.loadbalancer.server.port=8080
      - traefik.http.middlewares.auth.basicauth.users=admin:!!!SET MASTER_ADMIN_PASSWORD_HASH!!!
      {%- if cookiecutter.use_letsencrypt == 'y' %}    
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=le"
      {%- else %}
      - "traefik.http.routers.traefik.entrypoints=web"
      {%- endif %}      
    networks:
      - traefik-public
  

  {%- endif %}

  {%- if cookiecutter.use_portainer == 'y' %}

  portainer:
    image: portainer/portainer-ce
    command: -H unix:///var/run/docker.sock
    restart: always
    {%- if cookiecutter.expose_ports == 'y' %}
    ports:
      - 9000:9000
      - 8000:8000
    {%- endif %}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    {%- if cookiecutter.add_traefik_labels == 'y' %}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-portainer.rule=Host(`portainer.{{ cookiecutter.domain }}`)"
      - "traefik.http.services.{{ cookiecutter.project_slug }}-portainer.loadbalancer.server.port=9000"
      {%- if cookiecutter.use_letsencrypt == 'y' %}    
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-portainer.entrypoints=websecure"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-portainer.tls.certresolver=le"
      {%- else %}
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-portainer.entrypoints=web"
      {%- endif %}
    {%- endif %}
    {%- if cookiecutter.use_traefik == 'y' %}
    networks:
      - traefik-public
    {%- endif %}

  
  {%- endif %}


  {%- if cookiecutter.use_rocketconnect == 'y' %}

  rocketconnect: &django
    image: dudanogueira/rocket.connect:master
    depends_on:
      - postgres
      - redis_rocketconnect
    restart: unless-stopped
    environment:
      DJANGO_DEBUG: "False"
      DJANGO_SETTINGS_MODULE: config.settings.production
      DJANGO_SECRET_KEY: !!!SET DJANGO_SECRET_KEY!!!
      DJANGO_ADMIN_URL: admin!!!SET DJANGO_ADMIN_URL!!!/
      DJANGO_ALLOWED_HOSTS: "rc.{{cookiecutter.domain}},localhost,tasks.rocketconnect"
      DJANGO_SECURE_SSL_REDIRECT: "False"
      DJANGO_SERVER_EMAIL: 
      DJANGO_ACCOUNT_ALLOW_REGISTRATION: "True"
      WEB_CONCURRENCY: 4
      REDIS_URL: redis://redis_rocketconnect:6379/0
      CELERY_FLOWER_USER: admin
      CELERY_FLOWER_PASSWORD: !!!SET MASTER_ADMIN_PASSWORD!!!
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: rocket_connect
      POSTGRES_USER: !!!SET POSTGRES_USER!!!
      POSTGRES_PASSWORD: !!!SET POSTGRES_PASSWORD!!!
      DJANGO_DEFAULT_FROM_EMAIL: email@company.com
      DJANGO_EMAIL_PORT: 587
      DJANGO_EMAIL_USE_TLS: "True"
      DJANGO_EMAIL_HOST: 'smtp_server'
      DJANGO_EMAIL_HOST_USER: 'smtp_user'
      DJANGO_EMAIL_HOST_PASSWORD: 'smtp_password'
      DJANGO_ACCOUNT_EMAIL_VERIFICATION: 'optional' # mandatory, optonal, or none
    healthcheck:
      test: curl --fail http://localhost:5000
      interval: 30s
      timeout: 10s
      retries: 3
    {%- if cookiecutter.add_traefik_labels == 'y' %}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-rocketconnect.rule=Host(`rc.{{ cookiecutter.domain }}`)"
      - "traefik.http.services.{{ cookiecutter.project_slug }}-rocketconnect.loadbalancer.server.port=5000"
      {%- if cookiecutter.use_letsencrypt == 'y' %}    
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-rocketconnect.entrypoints=websecure"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-rocketconnect.tls.certresolver=le"
      {%- else %}
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-rocketconnect.entrypoints=web"
      {%- endif %}
    {%- endif %}
    command: /start
    {%- if cookiecutter.expose_ports == 'y' %}
    ports:
     - "5000:5000"
    {%- endif %}
    {%- if cookiecutter.use_traefik == 'y' %}
    networks:
      - traefik-public
      - default
    {%- endif %}
  

  redis_rocketconnect:
    image: redis:5.0
    deploy:
      replicas: 1    

  celeryworker:
    <<: *django
    deploy:
      replicas: 1    
    command: /start-celeryworker
    ports: []
    labels: []
    healthcheck:
      disable: true

  celerybeat:
    <<: *django
    deploy:
      replicas: 1    
    command: /start-celerybeat
    ports: []
    labels: []
    healthcheck:
      disable: true

  flower:
    <<: *django
    deploy:
      replicas: 1    
    command: celery flower --app=config.celery_app  --broker="${CELERY_BROKER_URL}" --basic_auth="admin:!!!SET MASTER_ADMIN_PASSWORD!!!" --url_prefix=flower!!!SET DJANGO_ADMIN_URL!!!
    {%- if cookiecutter.expose_ports == 'y' %}
    ports:
      - "5555:5555"
    {%- endif %}
    healthcheck:
      disable: true
    {%- if cookiecutter.add_traefik_labels == 'y' %}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-flower.rule=Host(`rc.{{ cookiecutter.domain }}`) && PathPrefix(`/flower!!!SET DJANGO_ADMIN_URL!!!`)"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-flower.entrypoints=web"
      - "traefik.http.services.{{ cookiecutter.project_slug }}-flower.loadbalancer.server.port=5555"
      # Add trailing slash to /flower!!!SET DJANGO_ADMIN_URL!!! path
      # https://community.traefik.io/t/middleware-to-add-the-if-needed/1895/4
      - traefik.http.middlewares.{{ cookiecutter.project_slug }}-flower-strip-slash.redirectregex.regex=(^.*\/flower!!!SET DJANGO_ADMIN_URL!!!$$)
      - traefik.http.middlewares.{{ cookiecutter.project_slug }}-flower-strip-slash.redirectregex.replacement=$$1/
      - traefik.http.middlewares.{{ cookiecutter.project_slug }}-flower-strip-slash.redirectregex.permanent=false
      - traefik.http.routers.{{ cookiecutter.project_slug }}-flower.middlewares={{ cookiecutter.project_slug }}-flower-strip-slash    
    {%- endif %}
    {%- if cookiecutter.use_traefik == 'y' %}
    networks:
      - traefik-public
      - default
    {%- endif %}

  {%- endif %}

  {%- if cookiecutter.use_rocketconnect == 'y' or  cookiecutter.use_nextcloud == 'y' or cookiecutter.use_metabase == 'yes' %}

  postgres:
    image: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data:Z
      - ./scripts/postgres/:/docker-entrypoint-initdb.d/
    deploy:
      mode: global
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_MULTIPLE_DATABASES: rocket_connect{%- if cookiecutter.use_metabase == 'y' %},metabase{%-endif%}{%- if cookiecutter.use_nextcloud == 'y' %},nextcloud{%-endif%}
      POSTGRES_USER: !!!SET POSTGRES_USER!!!
      POSTGRES_PASSWORD: !!!SET POSTGRES_PASSWORD!!!

  {%- endif %}

  {%- if cookiecutter.use_waautomate == 'y' %}

  waautomate1:
    image: dudanogueira/waautomate:latest
    command: npx @open-wa/wa-automate --ev "http://tasks.rocketconnect:5000/connector/0696DBBDDBA5435682CA/" --no-kill-on-logout
    restart: unless-stopped
    volumes:
      - waautomate_session_data:/usr/src/app/session_data
      - ./instances/instance1.json:/usr/src/app/cli.config.json
    depends_on:
      - browser
    {%- if cookiecutter.expose_ports == 'y' %}
    ports:
      - "8001:8002"
    {% endif %}
    links:
      - "rocketconnect:tasks.rocketconnect"
    
  browser:
    image: browserless/chrome:1.45-chrome-stable
    restart: unless-stopped
    hostname: browser
    ports:
      - "3010:3000"
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
    environment:
        CONNECTION_TIMEOUT: -1
        KEEP_ALIVE: 'true'
        WORKSPACE_EXPIRE_DAYS: 1
        ENABLE_CORS: 'true'
        CHROME_REFRESH_TIME: 86400000
        DEFAULT_BLOCK_ADS: 'true'
        FUNCTION_ENABLE_INCOGNITO_MODE: 'true'
        ENABLE_XVBF: 'true'
        CHROME_PATH: '/usr/bin/google-chrome'
        USE_CHROME_STABLE: 'true'
        NODE_ENV: 'production'
  
  {%- endif %}

  {%- if cookiecutter.use_wppconnect == 'y' %}

  wppconnect:
    image: wppconnect/server-cli:latest
    command: wppserver
      --log-level DEBUG
      --secretKey My53cr3tKY
      --port 21465
      --startAllSession
      --webhook-allUnreadOnStart
      --no-webhook-onPresenceChanged
      --no-webhook-onParticipantsChanged
      #--no-webhook-listenAcks
    volumes:
      - wppconnect_data:/usr/src/server-cli/tokens      
    {%- if cookiecutter.expose_ports == 'y' %}
    ports:
      - "21465:21465"
    {% endif %}

  {%- endif %}

  {%- if cookiecutter.use_rocketchat == 'y' %}

  rocketchat:
    image: rocketchat/rocket.chat:latest
    networks:
      - traefik-public
      - default
    command: >
      bash -c
        "for i in `seq 1 30`; do
          node main.js &&
          s=$$? && break || s=$$?;
          echo \"Tried $$i times. Waiting 5 secs...\";
          sleep 5;
        done; (exit $$s)"
    restart: unless-stopped
    volumes:
      - rocketchat_uploads:/app/uploads
    environment:
      - PORT=3000
      - ROOT_URL=http{%- if cookiecutter.use_letsencrypt == 'y' %}s{%- endif %}://chat.{{ cookiecutter.domain }}
      - MONGO_URL=mongodb://mongo:27017/rocketchat
      - MONGO_OPLOG_URL=mongodb://mongo:27017/local
      - MAIL_URL=smtp://smtp.email
      - OVERWRITE_SETTING_Show_Setup_Wizard=completed
      - ADMIN_USERNAME=adminrc
      - ADMIN_PASS=!!!SET MASTER_ADMIN_PASSWORD!!!
      - TZ=America/Brasilia
    depends_on:
      - mongo
      - mongo-init-replica
    {%- if cookiecutter.expose_ports == 'y' %}
    ports:
      - "3000:3000"
    {%- endif %}
    {%- if cookiecutter.add_traefik_labels == 'y' %}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-rocketchat.rule=Host(`chat.{{ cookiecutter.domain }}`)"
      - "traefik.http.services.{{ cookiecutter.project_slug }}-rocketchat.loadbalancer.server.port=3000"
      {%- if cookiecutter.use_letsencrypt == 'y' %}    
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-rocketchat.entrypoints=websecure"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-rocketchat.tls.certresolver=le"
      {%- else %}
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-rocketchat.entrypoints=web"
      {%- endif %}
    {%- endif %}
    {%- if cookiecutter.use_traefik == 'y' %}
    networks:
      - traefik-public
      - default
    {%- endif %}

  mongo:
    image: mongo:4.4
    restart: unless-stopped
    volumes:
     - ./data/rocketchat_db:/data/db
     - ./data/rocketchat_dump/dump:/dump
    command: mongod --oplogSize 128 --replSet rs0 --storageEngine=wiredTiger
    labels:
      - "traefik.enable=false"

  # this container's job is just run the command to initialize the replica set.
  # it will run the command and remove himself (it will not stay running)
  mongo-init-replica:
    image: mongo:4.4
    command: >
      bash -c
        "for i in `seq 1 30`; do
          mongo mongo/rocketchat --eval \"
            rs.initiate({
              _id: 'rs0',
              members: [ { _id: 0, host: 'localhost:27017' } ]})\" &&
          s=$$? && break || s=$$?;
          echo \"Tried $$i times. Waiting 5 secs...\";
          sleep 5;
        done; (exit $$s)"
    depends_on:
      - mongo

  {%- endif %}

  {%- if cookiecutter.use_phpweb == 'y' %}

  apache:
    image: 'php:apache'
    {%- if cookiecutter.expose_ports == 'y' %}
    ports:
       - "81:80"
    {%- endif %}
    restart: unless-stopped
    volumes:
      - ./site:/var/www/html
      - ./confs/apache/additional.conf:/etc/apache2/conf-enabled/additional.conf
    {%- if cookiecutter.add_traefik_labels == 'y' %}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-apache.rule=Host(`{{ cookiecutter.domain }}`) || Host(`www.{{ cookiecutter.domain }}`)"
      - "traefik.http.services.{{ cookiecutter.project_slug }}-apache.loadbalancer.server.port=80"
      {%- if cookiecutter.use_letsencrypt == 'y' %}    
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-apache.entrypoints=websecure"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-apache.tls.certresolver=le"
      {%- else %}
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-apache.entrypoints=web"
      {%- endif %}
    {%- endif %}
    {%- if cookiecutter.use_traefik == 'y' %}
    networks:
      - traefik-public
      - default
    {%- endif %}

  {%- endif %}

  {%- if cookiecutter.use_metabase == 'y' %}
  
  metabase:
    image: metabase/metabase:latest
    {%- if cookiecutter.expose_ports == 'y' %}
    ports:
      - 3001:3000
    {%- endif %}
    environment: 
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: metabase
      MB_DB_PORT: 5432
      MB_DB_USER: !!!SET POSTGRES_USER!!!
      MB_DB_PASS: !!!SET POSTGRES_PASSWORD!!!
      MB_DB_HOST: postgres
      MB_SITE_URL: http://metabase.{{ cookiecutter.domain }}
    {%- if cookiecutter.add_traefik_labels == 'y' %}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-metabase.rule=Host(`metabase.{{ cookiecutter.domain }}`)"
      - "traefik.http.services.{{ cookiecutter.project_slug }}-metabase.loadbalancer.server.port=3000"
      {%- if cookiecutter.use_letsencrypt == 'y' %}    
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-metabase.entrypoints=websecure"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-metabase.tls.certresolver=le"
      {%- else %}
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-metabase.entrypoints=web"
      {%- endif %}
    {%- endif %}
    depends_on:
      - postgres   
    {%- if cookiecutter.use_traefik == 'y' %}
    networks:
      - traefik-public
      - default
    {%- endif %}

  {%- endif %}

  {%- if cookiecutter.use_nextcloud == 'y' %}

  nextcloud:
    image: nextcloud
    restart: always
    {%- if cookiecutter.expose_ports == 'y' %}
    ports:
      - 8084:80
    {%- endif %}
    links:
      - postgres
    volumes:
      - nextcloud_data:/var/www/html
    environment:
      - POSTGRES_HOST=postgres # service name for postgres as assigned by Docker
      - POSTGRES_DB=nextcloud
      - POSTGRES_USER=!!!SET POSTGRES_USER!!! # will access postgres over 5432
      - POSTGRES_PASSWORD=!!!SET POSTGRES_PASSWORD!!!
      - NEXTCLOUD_ADMIN_USER=admin
      - NEXTCLOUD_ADMIN_PASSWORD=!!!SET MASTER_ADMIN_PASSWORD!!!
      - NEXTCLOUD_TRUSTED_DOMAINS= localhost cloud.{{ cookiecutter.domain }}
      # - REDIS_HOST
      # - REDIS_HOST_PORT
      # - REDIS_HOST_PASSWORD
    {%- if cookiecutter.add_traefik_labels == 'y' %}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-nextcloud.rule=Host(`cloud.{{ cookiecutter.domain }}`)"
      - "traefik.http.services.{{ cookiecutter.project_slug }}-nextcloud.loadbalancer.server.port=80"
      {%- if cookiecutter.use_letsencrypt == 'y' %}    
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-nextcloud.entrypoints=websecure"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-nextcloud.tls.certresolver=le"
      {%- else %}
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-nextcloud.entrypoints=web"
      {%- endif %}
    {%- endif %}
    {%- if cookiecutter.use_traefik == 'y' %}
    networks:
      - traefik-public
      - default
    {%- endif %}    
    #entrypoint: ["/wait-for-it.sh", "postgres:5432", "--", "apache2-foreground"]
  {%- endif %}

  {%- if cookiecutter.use_odoo == 'y' %}

  odoo:
    image: odoo:14.0
    depends_on:
      - odoo_db
    volumes:
      - odoo_data:/var/lib/odoo
      - odoo_config:/etc/odoo
      - odoo_addons:/mnt/extra-addons
    links:
      - odoo_db:db
    {%- if cookiecutter.expose_ports == 'y' %}
    ports:
      - 8069:8069
    {%- endif %}
    {%- if cookiecutter.add_traefik_labels == 'y' %}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-odoo.rule=Host(`odoo.{{ cookiecutter.domain }}`)"
      - "traefik.http.services.{{ cookiecutter.project_slug }}-odoo.loadbalancer.server.port=8069"
      {%- if cookiecutter.use_letsencrypt == 'y' %}    
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-odoo.entrypoints=websecure"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-odoo.tls.certresolver=le"
      {%- else %}
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-odoo.entrypoints=web"
      {%- endif %}
    {%- endif %}
    {%- if cookiecutter.use_traefik == 'y' %}
    networks:
      - traefik-public
      - default
    {%- endif %}

  odoo_db:
    image: postgres:10
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_PASSWORD=odoo
      - POSTGRES_USER=odoo
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - ./data/odoo/db:/var/lib/postgresql/data/pgdata


  {%- endif %}


  {%- if cookiecutter.use_mautic == 'y' %}
  mauticdb:
    image: powertic/percona-docker
    volumes:
      - mautic_db:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=!!!SET POSTGRES_PASSWORD!!!
    command:
      --character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci

  mautic:
    image: mautic/mautic:v3
    depends_on:
      - mauticdb
    {%- if cookiecutter.expose_ports == 'y' %}
    ports:
      - 8088:80
    {%- endif %}
    volumes:
      - mautic_data:/var/www/html
    environment:
      - MAUTIC_DB_HOST=mauticdb
      - MYSQL_PORT_3306_TCP=3306
      - MAUTIC_DB_USER=root
      - MAUTIC_DB_PASSWORD=!!!SET POSTGRES_PASSWORD!!!
      - MAUTIC_DB_NAME=mautic
      - MAUTIC_RUN_CRON_JOBS=true
    {%- if cookiecutter.add_traefik_labels == 'y' %}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-mautic.rule=Host(`m.{{ cookiecutter.domain }}`)"
      - "traefik.http.services.{{ cookiecutter.project_slug }}-mautic.loadbalancer.server.port=80"
      {%- if cookiecutter.use_letsencrypt == 'y' %}    
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-mautic.entrypoints=websecure"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-mautic.tls.certresolver=le"
      {%- else %}
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-mautic.entrypoints=web"
      {%- endif %}
    {%- endif %}  
    {%- if cookiecutter.use_traefik == 'y' %}
    networks:
      - traefik-public
      - default
    {%- endif %}        
  {%- endif %}

  {%- if cookiecutter.use_limesurvey == 'y' %}
  
  limesurvey:
    volumes:
      - limesurvey_db:/var/lib/mysql
      - limesurvey_uploads:/app/upload
    image:
      crramirez/limesurvey:latest
    {%- if cookiecutter.add_traefik_labels == 'y' %}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-limesurvey.rule=Host(`p.{{ cookiecutter.domain }}`)"
      - "traefik.http.services.{{ cookiecutter.project_slug }}-limesurvey.loadbalancer.server.port=80"
      {%- if cookiecutter.use_letsencrypt == 'y' %}    
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-limesurvey.entrypoints=websecure"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-limesurvey.tls.certresolver=le"
      {%- else %}
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-limesurvey.entrypoints=web"
      {%- endif %}
    {%- endif %}            
    {%- if cookiecutter.expose_ports == 'y' %}
    ports:
      - 8081:8081
    {%- endif %}
    {%- if cookiecutter.use_traefik == 'y' %}
    networks:
      - traefik-public
      - default
    {%- endif %}

  {%- endif %}

  {%- if cookiecutter.use_glpi == 'y' %}

  glpi_db: 
    image: fametec/glpi:9.5.4-mariadb
    restart: unless-stopped
    volumes: 
      - glpi_db:/var/lib/mysql:rw
    environment: 
      MYSQL_DATABASE: glpi
      MYSQL_USER: !!!SET GLPI_USER!!! 
      MYSQL_PASSWORD: !!!SET GLPI_PASSWORD!!!
      MYSQL_RANDOM_ROOT_PASSWORD: 1 

  glpi: 
    image: fametec/glpi:9.5.4
    restart: unless-stopped
    volumes: 
      - glpi_files:/var/www/html/files:rw
      - glpi_plugins:/var/www/html/plugins:rw
    environment: 
      GLPI_LANG: pt_BR
      MARIADB_HOST: glpi_db
      MARIADB_PORT: 3306
      MARIADB_DATABASE: glpi
      MARIADB_USER: !!!SET GLPI_USER!!!
      MARIADB_PASSWORD: !!!SET GLPI_PASSWORD!!!
      VERSION: "9.5.4"
      PLUGINS: "all"
    depends_on: 
      - glpi_db
    {%- if cookiecutter.add_traefik_labels == 'y' %}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-glpi.rule=Host(`glpi.{{ cookiecutter.domain }}`)"
      - "traefik.http.services.{{ cookiecutter.project_slug }}-glpi.loadbalancer.server.port=80"
      {%- if cookiecutter.use_letsencrypt == 'y' %}    
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-glpi.entrypoints=websecure"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-glpi.tls.certresolver=le"
      {%- else %}
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-glpi.entrypoints=web"
      {%- endif %}
    {%- endif %}  
    {%- if cookiecutter.expose_ports == 'y' %}
    ports:
      - 8082:80
    {%- endif %}  
    {%- if cookiecutter.use_traefik == 'y' %}
    networks:
      - traefik-public
      - default
    {%- endif %}  
  {%- endif %}

  {%- if cookiecutter.use_moodle == 'y' %}

  moodle_db:
    image: docker.io/bitnami/mariadb:10.5
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - MARIADB_USER=bn_moodle
      - MARIADB_DATABASE=bitnami_moodle
      - MARIADB_CHARACTER_SET=utf8mb4
      - MARIADB_COLLATE=utf8mb4_unicode_ci
    volumes:
      - 'moodle_db:/bitnami/mariadb'

  moodle:
    image: docker.io/bitnami/moodle:3
    {%- if cookiecutter.expose_ports == 'y' %}
    ports:
      - '8083:8080'
    {%- endif %}
    {%- if cookiecutter.add_traefik_labels == 'y' %}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-ead.rule=Host(`ead.{{ cookiecutter.domain }}`)"
      - "traefik.http.services.{{ cookiecutter.project_slug }}-ead.loadbalancer.server.port=8080"
      {%- if cookiecutter.use_letsencrypt == 'y' %}    
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-ead.entrypoints=websecure"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-ead.tls.certresolver=le"
      {%- else %}
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-ead.entrypoints=web"
      {%- endif %}
    {%- endif %}      
    environment:
      - MOODLE_USERNAME=admin
      - MOODLE_PASSWORD=!!!SET MASTER_ADMIN_PASSWORD!!!
      - MOODLE_SITE_NAME={{cookiecutter.project_name}}
      - MOODLE_DATABASE_HOST=moodle_db
      - MOODLE_DATABASE_PORT_NUMBER=3306
      - MOODLE_DATABASE_USER=bn_moodle
      - MOODLE_DATABASE_NAME=bitnami_moodle
      - ALLOW_EMPTY_PASSWORD=yes
    volumes:
      - 'moodle_data:/bitnami/moodle'
    depends_on:
      - moodle_db
    {%- if cookiecutter.use_traefik == 'y' %}
    networks:
      - traefik-public
      - default
    {%- endif %}
  
  {%- endif %}

  {%- if cookiecutter.use_rasax == 'y' %}

  rasa-x:
    restart: always
    image: "rasa/rasa-x:${RASA_X_VERSION}"
    expose:
      - "5002"
    volumes:
      - ./data/rasax/models:/app/models
      - ./confs/rasax/environments.yml:/app/environments.yml
      - ./confs/rasax/credentials.yml:/app/credentials.yml
      - ./confs/rasax/endpoints.yml:/app/endpoints.yml
      - ./data/rasax/logs:/logs
      - ./data/rasax/auth:/app/auth
    environment:
      <<: *database-credentials
      <<: *rasa-credentials
      SELF_PORT: "5002"
      DB_DATABASE: "${DB_DATABASE:-rasa}"
      RASA_MODEL_DIR: "/app/models"
      PASSWORD_SALT: ${PASSWORD_SALT}
      RABBITMQ_QUEUE: "rasa_production_events"
      RASA_X_USER_ANALYTICS: "0"
      SANIC_RESPONSE_TIMEOUT: "3600"
      RUN_DATABASE_MIGRATION_AS_SEPARATE_SERVICE: "true"
      RASA_X_PASSWORD: "!!!SET MASTER_ADMIN_PASSWORD!!!"
    depends_on:
      - db
      
  db-migration:
    entrypoint: ["python"]
    command: ["-m", "rasax.community.services.db_migration_service"]
    restart: always
    image: "rasa/rasa-x:${RASA_X_VERSION}"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || kill 1"]
      interval: 5s
      timeout: 1s
      retries: 3
      start_period: 2s
    expose:
      - "8000"
    environment:
      <<: *database-credentials
      RUN_DATABASE_MIGRATION_AS_SEPARATE_SERVICE: "true"
      MPLCONFIGDIR: "/tmp/.matplotlib"
    depends_on:
      - db

  rasa-production:
    <<: *default-rasa-service
    environment:
      <<: *rasa-credentials
      RASA_ENVIRONMENT: "production"
      DB_DATABASE: "tracker"
      MPLCONFIGDIR: "/tmp/.matplotlib"
      RASA_MODEL_SERVER: "http://rasa-x:5002/api/projects/default/models/tags/production"

  rasa-worker:
    <<: *default-rasa-service
    environment:
      <<: *rasa-credentials
      RASA_ENVIRONMENT: "worker"
      DB_DATABASE: "worker_tracker"
      MPLCONFIGDIR: "/tmp/.matplotlib"
      RASA_MODEL_SERVER: "http://rasa-x:5002/api/projects/default/models/tags/production"

  app:
    restart: always
    image: "rasa/rasa-x-demo:${RASA_X_DEMO_VERSION}"
    expose:
      - "5055"
    depends_on:
      - rasa-production

  db:
    restart: always
    image: "bitnami/postgresql:11.11.0"
    expose:
      - "5432"
    environment:
      POSTGRESQL_USERNAME: "${DB_USER:-admin}"
      POSTGRESQL_PASSWORD: "${DB_PASSWORD}"
      POSTGRESQL_DATABASE: "${DB_DATABASE:-rasa}"
    volumes:
      - rasax_db:/bitnami/postgresql

  rabbit:
    restart: always
    image: "bitnami/rabbitmq:3.8.17"
    environment:
      RABBITMQ_HOST: "rabbit"
      RABBITMQ_USERNAME: "user"
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      RABBITMQ_DISK_FREE_RELATIVE_LIMIT: "0.1"
    expose:
      - "5672"

  duckling:
    restart: always
    image: "rasa/duckling:0.1.6.5-r2"
    expose:
      - "8000"
    command: ["duckling-example-exe", "--no-access-log", "--no-error-log"]
                 
  nginx-rasa:
    restart: always
    image: "nginx:1.19"
    {%- if cookiecutter.expose_ports == 'y' %}
    ports:
      - "8055:8080"
    {%- endif %}
    volumes:
      - ./data/rasax/certs:/etc/certs
      - ./confs/rasax/nginx-config-files/nginx.conf:/etc/nginx/nginx.conf
      - ./confs/rasax/nginx-config-files/ssl.conf.template:/etc/nginx/templates/ssl.conf.template
      - ./confs/rasax/nginx-config-files/rasax.nginx.template:/etc/nginx/templates/rasax.nginx.template
    environment:
      <<: *nginx-host-variables
    depends_on:
      - rasa-x
      - rasa-production
      - app
    {%- if cookiecutter.add_traefik_labels == 'y' %}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-bot.rule=Host(`bot.{{ cookiecutter.domain }}`)"
      - "traefik.http.services.{{ cookiecutter.project_slug }}-bot.loadbalancer.server.port=8080"
      {%- if cookiecutter.use_letsencrypt == 'y' %}    
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-bot.entrypoints=websecure"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-bot.tls.certresolver=le"
      {%- else %}
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-bot.entrypoints=web"
      {%- endif %}
    {%- endif %}   
    networks:
      - traefik-public
      - default

  {%- endif %}

  {%- if cookiecutter.use_rasax == 'y' %}  
  redis:
    restart: always
    image: "bitnami/redis:6.2.4"
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    expose:
      - "6379"
  {%- endif %}

  {%- if cookiecutter.use_openproject == 'y' %}  
  # reference
  # https://www.openproject.org/docs/installation-and-operations/installation/docker/
  openproject_db:
    image: postgres:10
    <<: *restart_policy
    stop_grace_period: "3s"
    volumes:
      - "openproject_pgdata:/var/lib/postgresql/data"
    environment:
      POSTGRES_PASSWORD: p4ssw0rd
      POSTGRES_DB: openproject

  openproject_cache:
    image: memcached
    <<: *restart_policy

  openproject:
    <<: *app
    command: "./docker/prod/web"
    depends_on:
      - openproject_db
      - openproject_cache
      - openproject_seeder
    networks:
      - traefik-public
      - default
    labels:
        - "traefik.enable=true"
        - "traefik.http.routers.{{ cookiecutter.project_slug }}-projects.rule=Host(`projects.{{ cookiecutter.domain }}`)"
        - "traefik.http.services.{{ cookiecutter.project_slug }}-projects.loadbalancer.server.port=8080"
        {%- if cookiecutter.use_letsencrypt == 'y' %}
        - "traefik.http.routers.{{ cookiecutter.project_slug }}-projects.entrypoints=websecure"
        - "traefik.http.routers.{{ cookiecutter.project_slug }}-projects.tls.certresolver=le"
        {%- else %}
        - "traefik.http.routers.{{ cookiecutter.project_slug }}-projects.entrypoints=web"
        {%- endif %}   

  openproject_worker:
    <<: *app
    command: "./docker/prod/worker"
    depends_on:
      - openproject_db
      - openproject_cache
      - openproject_seeder

  openproject_cron:
    <<: *app
    command: "./docker/prod/cron"
    depends_on:
      - openproject_db
      - openproject_cache
      - openproject_seeder

  openproject_seeder:
    <<: *app
    command: "./docker/prod/seeder"
    restart: on-failure

  {%- endif %}

version: '3'

volumes:
  postgres_data:
  {%- if cookiecutter.use_letsencrypt %}
  traefik_letsencrypt:
  {%- endif %}
  {%- if cookiecutter.use_portainer == 'y' %}
  portainer_data:
  {%- endif %}
  {%- if cookiecutter.use_waautomate == 'y' %}
  waautomate_session_data:
  {%- endif %}
  {%- if cookiecutter.use_rocketchat == 'y' %}
  rocketchat_uploads:
  rocketchat_db:
  rocketchat_dump:
  {%- endif %}
  {%- if cookiecutter.use_nextcloud == 'y' %}
  nextcloud_data:
  {%- endif %}
  {%- if cookiecutter.use_odoo == 'y' %}
  odoo_data:
  odoo_config:
  odoo_addons:
  odoo_db:
  {%- endif %}
  {%- if cookiecutter.use_mautic == 'y' %}
  mautic_db:
  mautic_data:
  {%- endif %}
  {%- if cookiecutter.use_limesurvey == 'y' %}
  limesurvey_db:
  limesurvey_uploads:
  {%- endif %}
  {%- if cookiecutter.use_glpi == 'y' %}
  glpi_db:
  glpi_files:
  glpi_plugins:
  {%- endif %}

services:

  {%- if cookiecutter.use_traefik == 'y' %}

  traefik:
    image: "traefik:v2.4"
    command:
      #- "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      {%- if cookiecutter.use_letsencrypt %}
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--certificatesresolvers.le.acme.httpchallenge=true"
      - "--certificatesresolvers.le.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.le.acme.email={{ cookiecutter.email_for_letsencrypt }}"
      - "--certificatesresolvers.le.acme.storage=/letsencrypt/acme.json"
      {%- endif %}
    ports:
      - "80:80"
      {%- if cookiecutter.use_letsencrypt == "y"%}
      - "443:443"
      {%- endif %}
      {%- if cookiecutter.use_letsencrypt != "y"%}
      - "8080:8080"
      {%- endif %}
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      {%- if cookiecutter.use_letsencrypt %}
      - traefik_letsencrypt:/letsencrypt
      {%- endif %}
    labels:
      - traefik.enable=true
      - traefik.docker.lbswarm=true
      - traefik.http.routers.traefik.rule=Host(`traefik.{{ cookiecutter.domain }}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))
      - traefik.http.routers.traefik.middlewares=auth
      - traefik.http.routers.traefik.service=api@internal
      - traefik.http.services.traefik.loadbalancer.server.port=8080
      - traefik.http.middlewares.auth.basicauth.users=admin:!!!SET MASTER_ADMIN_PASSWORD_HASH!!!
      {%- if cookiecutter.use_letsencrypt == 'y' %}    
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=le"
      {%- else %}
      - "traefik.http.routers.traefik.entrypoints=web"
      {%- endif %}      

  {%- endif %}

  {%- if cookiecutter.use_portainer == 'y' %}

  portainer:
    image: portainer/portainer
    command: -H unix:///var/run/docker.sock
    restart: always
    ports:
      - 9000:9000
      - 8000:8000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    {%- if cookiecutter.add_traefik_labels == 'y' %}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-portainer.rule=Host(`portainer.{{ cookiecutter.domain }}`)"
      - "traefik.http.services.{{ cookiecutter.project_slug }}-portainer.loadbalancer.server.port=9000"
      {%- if cookiecutter.use_letsencrypt == 'y' %}    
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-portainer.entrypoints=websecure"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-portainer.tls.certresolver=le"
      {%- else %}
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-portainer.entrypoints=web"
      {%- endif %}
    {%- endif %}
  {%- endif %}


  {%- if cookiecutter.use_rocketconnect == 'y' %}

  rocketconnect: &django
    image: dudanogueira/rocket.connect:master
    depends_on:
      - postgres
      - redis
    environment:
      DJANGO_DEBUG: "False"
      DJANGO_SETTINGS_MODULE: config.settings.production
      DJANGO_SECRET_KEY: !!!SET DJANGO_SECRET_KEY!!!
      DJANGO_ADMIN_URL: admin!!!SET DJANGO_ADMIN_URL!!!/
      DJANGO_ALLOWED_HOSTS: "rc.{{cookiecutter.domain}},localhost"
      DJANGO_SECURE_SSL_REDIRECT: "False"
      DJANGO_SERVER_EMAIL: 
      DJANGO_ACCOUNT_ALLOW_REGISTRATION: "True"
      WEB_CONCURRENCY: 4
      REDIS_URL: redis://redis:6379/0
      CELERY_FLOWER_USER: admin
      CELERY_FLOWER_PASSWORD: !!!SET MASTER_ADMIN_PASSWORD!!!
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: rocket_connect
      POSTGRES_USER: !!!SET POSTGRES_USER!!!
      POSTGRES_PASSWORD: !!!SET POSTGRES_PASSWORD!!!
      DJANGO_DEFAULT_FROM_EMAIL: email@company.com
      DJANGO_EMAIL_PORT: 587
      DJANGO_EMAIL_USE_TLS: "True"
      DJANGO_EMAIL_HOST: 'smtp_server'
      DJANGO_EMAIL_HOST_USER: 'smtp_user'
      DJANGO_EMAIL_HOST_PASSWORD: 'smtp_password'
    healthcheck:
      test: curl --fail http://localhost:5000
      interval: 30s
      timeout: 10s
      retries: 3
    {%- if cookiecutter.add_traefik_labels == 'y' %}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-rocketconnect.rule=Host(`rc.{{ cookiecutter.domain }}`)"
      - "traefik.http.services.{{ cookiecutter.project_slug }}-rocketconnect.loadbalancer.server.port=5000"
      {%- if cookiecutter.use_letsencrypt == 'y' %}    
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-rocketconnect.entrypoints=websecure"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-rocketconnect.tls.certresolver=le"
      {%- else %}
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-rocketconnect.entrypoints=web"
      {%- endif %}
    {%- endif %}
    command: /start
    {%- if cookiecutter.use_traefik != 'y' %}
    ports:
     - "5000:5000"
    {%- endif %}
  
  postgres:
    image: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data:Z
      - ./scripts/postgres/:/docker-entrypoint-initdb.d/
    deploy:
      mode: global
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_MULTIPLE_DATABASES: rocket_connect{%- if cookiecutter.use_metabase == 'y' %},metabase{%-endif%}{%- if cookiecutter.use_nextcloud == 'y' %},nextcloud{%-endif%}
      POSTGRES_USER: !!!SET POSTGRES_USER!!!
      POSTGRES_PASSWORD: !!!SET POSTGRES_PASSWORD!!!

  redis:
    image: redis:5.0
    deploy:
      replicas: 1    

  celeryworker:
    <<: *django
    deploy:
      replicas: 1    
    command: /start-celeryworker
    ports: []
    labels: []
    healthcheck:
      disable: true

  celerybeat:
    <<: *django
    deploy:
      replicas: 1    
    command: /start-celerybeat
    ports: []
    labels: []
    healthcheck:
      disable: true

  flower:
    <<: *django
    deploy:
      replicas: 1    
    command: celery flower --app=config.celery_app  --broker="${CELERY_BROKER_URL}" --basic_auth="admin:!!!SET MASTER_ADMIN_PASSWORD!!!" --url_prefix=flower!!!SET DJANGO_ADMIN_URL!!!
    {%- if cookiecutter.use_traefik == 'y' %}
    ports:
      - "0.0.0.0:5555:5555"
    {%- endif %}
    healthcheck:
      disable: true
    {%- if cookiecutter.add_traefik_labels == 'y' %}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-flower.rule=Host(`rc.{{ cookiecutter.domain }}`) && PathPrefix(`/flower!!!SET DJANGO_ADMIN_URL!!!`)"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-flower.entrypoints=web"
      - "traefik.http.services.{{ cookiecutter.project_slug }}-flower.loadbalancer.server.port=5555"
      # Add trailing slash to /flower!!!SET DJANGO_ADMIN_URL!!! path
      # https://community.traefik.io/t/middleware-to-add-the-if-needed/1895/4
      - traefik.http.middlewares.{{ cookiecutter.project_slug }}-flower-strip-slash.redirectregex.regex=(^.*\/flower!!!SET DJANGO_ADMIN_URL!!!$$)
      - traefik.http.middlewares.{{ cookiecutter.project_slug }}-flower-strip-slash.redirectregex.replacement=$$1/
      - traefik.http.middlewares.{{ cookiecutter.project_slug }}-flower-strip-slash.redirectregex.permanent=false
      - traefik.http.routers.{{ cookiecutter.project_slug }}-flower.middlewares=flower-strip-slash    
    {%- endif %}
  {%- endif %}
      
  {%- if cookiecutter.use_waautomate == 'y' %}

  waautomate1:
    image: dudanogueira/waautomate:latest
    command: npx @open-wa/wa-automate --ev "http://tasks.rocketconnect:5000/connector/0696DBBDDBA5435682CA/" --no-kill-on-logout
    restart: unless-stopped
    volumes:
      - waautomate_session_data:/usr/src/app/session_data
      - ./instances/instance1.json:/usr/src/app/cli.config.json
    #extra_hosts:
    #  - "rocketconnect:rocketconnect.docker"
    depends_on:
      - browser
    ports:
      - "8001:8002"

  browser:
      image: browserless/chrome:1.45-chrome-stable
      hostname: browser
      ports:
        - "3010:3000"
      deploy:
        replicas: 1
        update_config:
          parallelism: 1
          delay: 10s
        restart_policy:
          condition: on-failure
      environment:
        CONNECTION_TIMEOUT: -1
        KEEP_ALIVE: 'true'
        WORKSPACE_EXPIRE_DAYS: 1
        ENABLE_CORS: 'true'
        CHROME_REFRESH_TIME: 86400000
        DEFAULT_BLOCK_ADS: 'true'
        FUNCTION_ENABLE_INCOGNITO_MODE: 'true'
        ENABLE_XVBF: 'true'
        CHROME_PATH: '/usr/bin/google-chrome'
        USE_CHROME_STABLE: 'true'
        NODE_ENV: 'production'
  
  {%- endif %}

  {%- if cookiecutter.use_rocketchat == 'y' %}

  rocketchat:
    image: rocketchat/rocket.chat:latest
    command: >
      bash -c
        "for i in `seq 1 30`; do
          node main.js &&
          s=$$? && break || s=$$?;
          echo \"Tried $$i times. Waiting 5 secs...\";
          sleep 5;
        done; (exit $$s)"
    restart: unless-stopped
    volumes:
      - rocketchat_uploads:/app/uploads
    environment:
      - PORT=3000
      - ROOT_URL=http://chat.{{ cookiecutter.domain }}
      - MONGO_URL=mongodb://mongo:27017/rocketchat
      - MONGO_OPLOG_URL=mongodb://mongo:27017/local
      - MAIL_URL=smtp://smtp.email
      - OVERWRITE_SETTING_Show_Setup_Wizard=completed
      - ADMIN_USERNAME=admin
      - ADMIN_PASS=!!!SET MASTER_ADMIN_PASSWORD!!!
    depends_on:
      - mongo
    {%- if cookiecutter.use_traefik != 'y' %}
    ports:
       - "3000:3000"
    {%- endif %}
    {%- if cookiecutter.add_traefik_labels == 'y' %}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-rocketchat.rule=Host(`chat.{{ cookiecutter.domain }}`)"
      - "traefik.http.services.{{ cookiecutter.project_slug }}-rocketchat.loadbalancer.server.port=3000"
      {%- if cookiecutter.use_letsencrypt == 'y' %}    
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-rocketchat.entrypoints=websecure"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-rocketchat.tls.certresolver=le"
      {%- else %}
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-rocketchat.entrypoints=web"
      {%- endif %}
    {%- endif %}
  
  mongo:
    image: mongo:4.0
    restart: unless-stopped
    volumes:
     - ./data/rocketchat_db:/data/db
     - ./data/rocketchat_dump/dump:/dump
    command: mongod --smallfiles --oplogSize 128 --replSet rs0 --storageEngine=mmapv1
    labels:
      - "traefik.enable=false"

  # this container's job is just run the command to initialize the replica set.
  # it will run the command and remove himself (it will not stay running)
  mongo-init-replica:
    image: mongo:4.0
    command: >
      bash -c
        "for i in `seq 1 30`; do
          mongo mongo/rocketchat --eval \"
            rs.initiate({
              _id: 'rs0',
              members: [ { _id: 0, host: 'localhost:27017' } ]})\" &&
          s=$$? && break || s=$$?;
          echo \"Tried $$i times. Waiting 5 secs...\";
          sleep 5;
        done; (exit $$s)"
    depends_on:
      - mongo

  {%- endif %}

  {%- if cookiecutter.use_phpweb == 'y' %}

  apache:
    image: 'php:apache'
    {%- if cookiecutter.use_traefik != 'y' %}
    ports:
       - "80:80"
    {%- endif %}
    volumes:
      - ./site:/var/www/html
      - ./confs/apache/additional.conf:/etc/apache2/conf-enabled/additional.conf
    {%- if cookiecutter.add_traefik_labels == 'y' %}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-apache.rule=Host(`{{ cookiecutter.domain }}`) || Host(`www.{{ cookiecutter.domain }}`)"
      - "traefik.http.services.{{ cookiecutter.project_slug }}-apache.loadbalancer.server.port=80"
      {%- if cookiecutter.use_letsencrypt == 'y' %}    
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-apache.entrypoints=websecure"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-apache.tls.certresolver=le"
      {%- else %}
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-apache.entrypoints=web"
      {%- endif %}
    {%- endif %}

  {%- endif %}

  {%- if cookiecutter.use_metabase == 'y' %}
  
  metabase:
    image: metabase/metabase:latest
    ports:
      - 3001:3000
    environment: 
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: metabase
      MB_DB_PORT: 5432
      MB_DB_USER: !!!SET POSTGRES_USER!!!
      MB_DB_PASS: !!!SET POSTGRES_PASSWORD!!!
      MB_DB_HOST: postgres
      MB_SITE_URL: http://metabase.{{ cookiecutter.domain }}
    {%- if cookiecutter.add_traefik_labels == 'y' %}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-metabase.rule=Host(`metabase.{{ cookiecutter.domain }}`)"
      - "traefik.http.services.{{ cookiecutter.project_slug }}-metabase.loadbalancer.server.port=3000"
      {%- if cookiecutter.use_letsencrypt == 'y' %}    
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-metabase.entrypoints=websecure"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-metabase.tls.certresolver=le"
      {%- else %}
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-metabase.entrypoints=web"
      {%- endif %}
    {%- endif %}
    depends_on:
      - postgres   
  
  {%- endif %}

  {%- if cookiecutter.use_nextcloud == 'y' %}

  nextcloud:
    image: nextcloud
    restart: always
    ports:
      - 8081:80
    links:
      - postgres
    volumes:
      - nextcloud_data:/var/www/html
    environment:
      - POSTGRES_HOST=postgres # service name for postgres as assigned by Docker
      - POSTGRES_DB=nextcloud
      - POSTGRES_USER=!!!SET POSTGRES_USER!!! # will access postgres over 5432
      - POSTGRES_PASSWORD=!!!SET POSTGRES_PASSWORD!!!
      - NEXTCLOUD_ADMIN_USER=admin
      - NEXTCLOUD_ADMIN_PASSWORD=!!!SET MASTER_ADMIN_PASSWORD!!!
      - NEXTCLOUD_TRUSTED_DOMAINS= localhost cloud.{{ cookiecutter.domain }}
      # - REDIS_HOST
      # - REDIS_HOST_PORT
      # - REDIS_HOST_PASSWORD
    {%- if cookiecutter.add_traefik_labels == 'y' %}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-nextcloud.rule=Host(`cloud.{{ cookiecutter.domain }}`)"
      - "traefik.http.services.{{ cookiecutter.project_slug }}-nextcloud.loadbalancer.server.port=80"
      {%- if cookiecutter.use_letsencrypt == 'y' %}    
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-nextcloud.entrypoints=websecure"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-nextcloud.tls.certresolver=le"
      {%- else %}
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-nextcloud.entrypoints=web"
      {%- endif %}
    {%- endif %}
    #entrypoint: ["/wait-for-it.sh", "postgres:5432", "--", "apache2-foreground"]
  {%- endif %}

  {%- if cookiecutter.use_odoo == 'y' %}

  odoo:
    image: odoo:14.0
    depends_on:
      - odoo_db
    volumes:
      - odoo_data:/var/lib/odoo
      - odoo_config:/etc/odoo
      - odoo_addons:/mnt/extra-addons
    links:
      - odoo_db:db
    {%- if cookiecutter.add_traefik_labels == 'y' %}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-odoo.rule=Host(`odoo.{{ cookiecutter.domain }}`)"
      - "traefik.http.services.{{ cookiecutter.project_slug }}-odoo.loadbalancer.server.port=8069"
      {%- if cookiecutter.use_letsencrypt == 'y' %}    
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-odoo.entrypoints=websecure"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-odoo.tls.certresolver=le"
      {%- else %}
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-odoo.entrypoints=web"
      {%- endif %}
    {%- endif %}

  odoo_db:
    image: postgres:10
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_PASSWORD=odoo
      - POSTGRES_USER=odoo
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - ./data/odoo/db:/var/lib/postgresql/data/pgdata


  {%- endif %}


  {%- if cookiecutter.use_mautic == 'y' %}
  mauticdb:
    image: powertic/percona-docker
    volumes:
      - mautic_db:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=!!!SET POSTGRES_PASSWORD!!!
    command:
      --character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci

  mautic:
    image: mautic/mautic:latest
    depends_on:
      - mauticdb
    # ports:
    #   - 8080:80
    volumes:
      - mautic_data:/var/www/html
    environment:
      - MAUTIC_DB_HOST=mauticdb
      - MYSQL_PORT_3306_TCP=3306
      - MAUTIC_DB_USER=root
      - MAUTIC_DB_PASSWORD=!!!SET POSTGRES_PASSWORD!!!
      - MAUTIC_DB_NAME=mautic
      - MAUTIC_RUN_CRON_JOBS=true
    {%- if cookiecutter.add_traefik_labels == 'y' %}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-mautic.rule=Host(`m.{{ cookiecutter.domain }}`)"
      - "traefik.http.services.{{ cookiecutter.project_slug }}-mautic.loadbalancer.server.port=80"
      {%- if cookiecutter.use_letsencrypt == 'y' %}    
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-mautic.entrypoints=websecure"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-mautic.tls.certresolver=le"
      {%- else %}
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-mautic.entrypoints=web"
      {%- endif %}
    {%- endif %}      
  {%- endif %}

  {%- if cookiecutter.use_limesurvey == 'y' %}
  
  limesurvey:
    volumes:
      - limesurvey_db:/var/lib/mysql
      - limesurvey_uploads:/app/upload
    image:
      crramirez/limesurvey:latest
    {%- if cookiecutter.add_traefik_labels == 'y' %}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-limesurvey.rule=Host(`p.{{ cookiecutter.domain }}`)"
      - "traefik.http.services.{{ cookiecutter.project_slug }}-limesurvey.loadbalancer.server.port=80"
      {%- if cookiecutter.use_letsencrypt == 'y' %}    
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-limesurvey.entrypoints=websecure"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-limesurvey.tls.certresolver=le"
      {%- else %}
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-limesurvey.entrypoints=web"
      {%- endif %}
    {%- endif %}            
  
  {%- endif %}

  {%- if cookiecutter.use_glpi == 'y' %}

  glpi_db: 
    image: fametec/glpi:9.5.4-mariadb
    restart: unless-stopped
    volumes: 
      - glpi_db:/var/lib/mysql:rw
    environment: 
      MYSQL_DATABASE: glpi
      MYSQL_USER: glpi-user 
      MYSQL_PASSWORD: glpi-pass 
      MYSQL_RANDOM_ROOT_PASSWORD: 1 

  glpi: 
    image: fametec/glpi:9.5.4
    restart: unless-stopped
    volumes: 
      - glpi_files:/var/www/html/files:rw
      - glpi_plugins:/var/www/html/plugins:rw
    environment: 
      GLPI_LANG: pt_BR
      MARIADB_HOST: glpi_db
      MARIADB_PORT: 3306
      MARIADB_DATABASE: glpi
      MARIADB_USER: glpi-user
      MARIADB_PASSWORD: glpi-pass
      VERSION: "9.5.4"
      PLUGINS: "all"
    depends_on: 
      - glpi_db
    {%- if cookiecutter.add_traefik_labels == 'y' %}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-glpi.rule=Host(`glpi.{{ cookiecutter.domain }}`)"
      - "traefik.http.services.{{ cookiecutter.project_slug }}-glpi.loadbalancer.server.port=80"
      {%- if cookiecutter.use_letsencrypt == 'y' %}    
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-glpi.entrypoints=websecure"
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-glpi.tls.certresolver=le"
      {%- else %}
      - "traefik.http.routers.{{ cookiecutter.project_slug }}-glpi.entrypoints=web"
      {%- endif %}
    {%- endif %}  
  
  {%- endif %}